[{"name":"app.R","content":"\r\nlibrary(shiny)\r\nlibrary(shinylive)\r\nlibrary(tidyverse)\r\nlibrary(ggtext)\r\n\r\n\r\n\r\n\r\nbc_import <- read.csv(\"https://raw.githubusercontent.com/tuiaj/test1/main/data/breastcancerdata.csv\") |>\r\n  janitor::clean_names() |>\r\n  janitor::remove_empty(which = \"cols\", cutoff = 1, quiet = TRUE) |> \r\n  rename_with(~ gsub(\"concave_points\", \"concavePoints\", .x)) |> \r\n  rename_with(~ gsub(\"fractal_dimension\", \"fractalDimension\", .x))|> \r\n  mutate(outcome = ifelse(diagnosis == \"M\", 1, 0))\r\n\r\n\r\ndiff <- bc_import |> \r\n  select(-diagnosis) |> \r\n  summarise(across(everything(), ~ max(.x) - min(.x))) \r\n\r\n\r\nfeatures <- unique(gsub(\"_.*\", \"\", names(bc_import)[-c(1,2)]))\r\nmeasure <- c(\"Mean\" = \"mean\", \"Standard error\"=\"se\", \"Largest value\"=\"worst\")\r\n\r\npearson_mean <- read.csv(\"https://raw.githubusercontent.com/tuiaj/test1/main/data/breastCancer_mean_coef.csv\")\r\npearson_worst <- read.csv(\"https://raw.githubusercontent.com/tuiaj/test1/main/data/breastCancer_worst_coef.csv\")\r\npearson_se <- read.csv(\"https://raw.githubusercontent.com/tuiaj/test1/main/data/breastCancer_se_coef.csv\")\r\n\r\npearson <- bind_rows(pearson_mean, pearson_worst) |> \r\n  bind_rows(pearson_se)\r\n\r\n\r\ncolor_dia <- c(\"M\" = \"#A63251\", \r\n               \"B\" = \"#8d99ae\")\r\n\r\n\r\n## https://www.kaggle.com/code/mirichoi0218/classification-breast-cancer-or-not-with-15-ml\r\n\r\n\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"Analysis of Breast Cancer Tumors \"),\r\n\r\n    # Sidebar with a slider input for number of bins\r\n\r\n    fluidRow(\r\n      column(3,\r\n             p(\"This is taken from a dataset\"),\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n    fluidRow(\r\n      column(3,\r\n             selectInput(\"x1\", \"Feature\", features ),\r\n      ),\r\n      column(3,\r\n             selectInput(\"x2\", \"Measurement type\", measure ),\r\n      ),\r\n    ),\r\n\r\n\r\n    fluidRow(\r\n      column(12,\r\n             h2(\"Distribution\")\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n    fluidRow(\r\n      column(12,\r\n             plotOutput(\"plot1\")\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n    fluidRow(\r\n      column(12,\r\n             p(\"\"),\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n    ##-----------------------------------------------------\r\n    fluidRow(\r\n      column(12,\r\n             h2(\"Logistic Regression\")\r\n      ),\r\n\r\n    ),\r\n\r\n    fluidRow(\r\n      column(8,\r\n             p(\"Runs a logistic regression on the selected variable for the outcome (malignancy).\r\n               Dots represent actual data points and the line is the regression. The green point represents\r\n               the inflection point at 0.5 probability. \")\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n    fluidRow(\r\n      column(8,\r\n             htmlOutput(\"x4\")\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n\r\n\r\n\r\n    fluidRow(\r\n      column(12,\r\n             p(\"NOTE: fractalDimension is very off, I assume since the values are so close together\")\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n\r\n    fluidRow(\r\n      column(12,\r\n             plotOutput(\"plot3\")\r\n      ),\r\n\r\n    ),\r\n\r\n    ##----------------------------------------------\r\n\r\n\r\n\r\n    fluidRow(\r\n      # column(2,\r\n      #        p(\"Compare against:\"),\r\n      # ),\r\n      column(3,\r\n             selectInput(\"x3\", \"Compare against:\", names(bc_import)[-c(1,2,33)]  ),\r\n      ),\r\n    ),\r\n\r\n\r\n\r\n    fluidRow(\r\n      column(12,\r\n             plotOutput(\"plot4\")\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n\r\n    ##----------------------------------------------\r\n    fluidRow(\r\n      column(12,\r\n             h2(\"Correlation\")\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n    fluidRow(\r\n      column(12,\r\n             plotOutput(\"plot2\")\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n    ##------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n)\r\n\r\n\r\n#----------------------------------------------------------------\r\n# Define server logic -------------------------------------------\r\n#----------------------------------------------------------------\r\n\r\n\r\nserver <- function(input, output) {\r\n  \r\n    var_name <- reactive({\r\n\r\n      paste0(input$x1, \"_\", input$x2)\r\n\r\n    })\r\n\r\n\r\n    ##-----------------------------------------------------------\r\n\r\n\r\n    output$plot1 <- renderPlot({\r\n\r\n      stat_test1 <- wilcox.test(get(var_name()) ~ diagnosis, data = bc_import)\r\n      stat_test2 <- t.test(get(var_name()) ~ diagnosis, data = bc_import,\r\n                           var.equal = TRUE)\r\n\r\n      signif <- stat_test1$p.value < 0.05\r\n\r\n      max_x <- max(bc_import[[var_name()]])\r\n\r\n      max_y <- bc_import |>\r\n        select(var_name(), diagnosis) |>\r\n        group_by(diagnosis) |>\r\n        do(den = density(.[[var_name()]])) |>\r\n        pull(den, diagnosis) |>\r\n        map(\"y\") |>\r\n        reduce(append) |>\r\n        max()\r\n\r\n\r\n      title1 <- paste0(\"<span style = 'color: \",\r\n                       \"#A63251\",\r\n                      \";'>Malignant<\/span> vs. <span style = 'color: \",\r\n                      \"#8d99ae\",\r\n                      \";'>Benign<\/span>\")\r\n\r\n\r\n      bc_import |>\r\n        ggplot(aes(x = get(var_name()), fill = diagnosis)) +\r\n        geom_density(size =1, alpha = 0.5) +\r\n        annotate(geom = \"label\", x = max_x, y = max_y,\r\n                 label = paste0(\"Wilcox, p=\", round(stat_test1$p.value, 2))\r\n                   ) +\r\n        annotate(geom = \"label\", x = max_x, y = max_y*0.9,\r\n                 label = paste0(\"T-test, p=\", round(stat_test2$p.value, 2))\r\n        ) +\r\n        scale_color_manual(values = color_dia,\r\n                           aesthetics = \"fill\") +\r\n        labs(x = input$x1,\r\n             title = title1,\r\n             y = \"\") +\r\n        # geom_label(aes(y = 0.02, label = as.character(round(stat_test1$p.value, 2)))) +\r\n        theme_minimal(base_size = 18) +\r\n        theme(axis.text.y = element_blank(),\r\n              plot.title = element_markdown(),\r\n              legend.position = \"none\"\r\n              )\r\n\r\n\r\n    })\r\n    \r\n    \r\n    \r\n    \r\n    # ##-----------------------------------------------------------------------\r\n\r\n    output$plot2 <- renderPlot({\r\n\r\n      alp <- 0.05\r\n\r\n\r\n      pearson |>\r\n        filter(Var1 == var_name()) |>\r\n        mutate(Var2 = str_to_sentence(gsub(paste0(\"_\", input$x2, \"$\"), \"\", Var2))) |>\r\n        mutate(Var2 = fct_reorder(factor(Var2), value)) |>\r\n        ggplot() +\r\n        geom_point(aes(x = value, y = Var2), size = 4) +\r\n        geom_rect(aes(xmin = 0, xmax = 0.3, ymin = 0, ymax = 10), fill = \"#94d2bd\", alpha = alp) +\r\n        geom_rect(aes(xmin = 0.3, xmax = 0.5, ymin = 0, ymax = 10), fill = \"#0a9396\", alpha = alp) +\r\n        geom_rect(aes(xmin = 0.5, xmax = 1, ymin = 0, ymax = 10), fill = \"#005f73\", alpha = alp) +\r\n        geom_rect(aes(xmin = 0, xmax = -0.3, ymin = 0, ymax = 10), fill = \"#e9d8a6\", alpha = alp) +\r\n        geom_rect(aes(xmin = -0.3, xmax = -0.5, ymin = 0, ymax = 10), fill = \"#ee9b00\", alpha = alp) +\r\n        geom_rect(aes(xmin = -0.5, xmax = -1, ymin = 0, ymax = 10), fill = \"#bb3e03\", alpha = alp) +\r\n        geom_segment(aes(y = Var2,  yend = Var2, x = CI1, xend = CI2),\r\n                     lineend='round', size = 3, color = \"black\", alpha = 0.5) +\r\n        geom_vline(xintercept = 0) +\r\n        scale_x_continuous(limits = c(-1,1),\r\n                           expand = c(0, 0)) +\r\n        theme_minimal(base_size = 18) +\r\n        labs(title = str_to_sentence(input$x1),\r\n             x = \"Pearson's product-moment correlation\",\r\n             y = \"\") +\r\n        theme(\r\n              panel.grid.major.y = element_blank(),\r\n              panel.grid.minor.y = element_blank(),\r\n              panel.grid.major.x = element_line(color = \"darkgrey\"),\r\n              panel.grid.minor.x = element_line(color = \"darkgrey\"))\r\n\r\n\r\n    })\r\n\r\n\r\n    ##-------------------------------------------------------\r\n\r\n\r\n    get_model1 <- reactive({\r\n\r\n      bc_import %>%\r\n        rename(var = var_name()) %>%\r\n        glm(outcome ~ var, data = ., family = \"binomial\")\r\n\r\n\r\n    })\r\n\r\n    ##-------------------------------------------\r\n\r\n    output$x4 <- renderText({\r\n\r\n      model_single2 <- get_model1()\r\n\r\n      inflection_point2 <- -coef(model_single2)[1]/coef(model_single2)[2]\r\n\r\n\r\n\r\n      paste0(\"For the variable \", var_name(), \", at \",  round(inflection_point2, 2), \" the observation has a 50/50 probability of being labeled as malignant or benign\")\r\n    })\r\n\r\n\r\n\r\n    ##-------------------------------------------\r\n    output$plot3 <- renderPlot({\r\n\r\n      varz <- var_name()\r\n\r\n\r\n      model_single <- get_model1()\r\n\r\n      # diff_ <- diff[[varz]]\r\n      maxz <- max(bc_import[[varz]])\r\n      minz <- min(bc_import[[varz]])\r\n\r\n      # model_scaled <- bc_import %>%\r\n      #   rename(var = varz) %>%\r\n      #   mutate(var = scale(var)) %>%\r\n      #   glm(outcome ~ var, data = ., family = \"binomial\")\r\n\r\n\r\n      odds_ratio <- exp(coef(model_single)[-1])\r\n      odds_ratioz <- ifelse(odds_ratio >20, \"OR: >20\", paste0(\"OR: \", round(odds_ratio, 2)))\r\n\r\n      model_single_predict <- predict(model_single, data.frame(var = seq(minz, maxz, maxz/50)),  type = \"response\")\r\n\r\n      pred_test3 <- data.frame(var = seq(minz, maxz, maxz/50), predict_controlarea = model_single_predict)\r\n\r\n      inflection_point <- -coef(model_single)[1]/coef(model_single)[2]\r\n\r\n\r\n\r\n      bc_import |>\r\n        rename(var = varz) %>%\r\n        ggplot() +\r\n        geom_jitter(aes(x = var, y = outcome, color = diagnosis),\r\n                    height = 0.25,\r\n                    alpha = 0.2,\r\n                    size = 3) +\r\n        geom_line(data = pred_test3, aes(x = var, y = predict_controlarea), size = 0.9, linetype = \"dashed\") +\r\n        geom_point(aes(x = inflection_point, y =0.5), color = \"#025928\", size = 4) +\r\n        scale_y_continuous(breaks = c(0,1),\r\n                           labels = c(\"Benign\", \"Malignant\")) +\r\n        geom_label(aes(label = odds_ratioz, x = maxz, y = 0.5),\r\n                   fill = \"#F28705\",\r\n                   color = \"white\",\r\n                   size = 8,\r\n                   hjust = 1) +\r\n        scale_color_manual(values = color_dia,\r\n                           aesthetics = \"color\") +\r\n        labs(x = varz,\r\n             y = \"Probablity\") +\r\n        theme_minimal(base_size = 18) +\r\n        theme(panel.grid.minor.y = element_blank(),\r\n              legend.position = \"none\")\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n    ##-----------------------------------------------------\r\n\r\n\r\n    output$plot4 <- renderPlot({\r\n\r\n      bc_import |>\r\n        ggplot(aes(x = get(var_name()),\r\n                   y = get(input$x3),\r\n                   color = diagnosis)) +\r\n        geom_point(alpha = 0.5, size = 3) +\r\n        scale_color_manual(values = color_dia,\r\n                           aesthetics = \"color\") +\r\n        theme_minimal(base_size = 18) +\r\n        labs(x = var_name(),\r\n             y = input$x3) +\r\n        theme(legend.position = \"none\")\r\n\r\n    })\r\n\r\n\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
